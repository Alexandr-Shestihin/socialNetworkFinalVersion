{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Massages/Massages.jsx","components/Dialogs/Dialogs.jsx","components/hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","obj","path","id","to","className","s","dialog","activeClassName","active","name","Massages","props","message","messages","Textarea","Element","AddMassageForm","messagesElements","dialogsPage","massages","map","m","massage","validationSchema","yup","shape","required","initialValues","onSubmit","values","setSubmitting","addNewMassage","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","component","type","placeholder","onChange","onBlur","value","disabled","Dialogs","dialogsElements","dialogs","d","isAuth","dialogs_items","text","addMassageActionCreator","mapStateToPropsForRedirect","state","auth","DialogsContainer","this","React","Component","compose","connect","newMassageText","RedirectComponent"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,OAAS,wBAAwB,SAAW,0BAA0B,OAAS,0B,kICYpKC,EATI,SAACC,GACjB,IAAIC,EAAO,YAAcD,EAAIE,GAC7B,OACG,8BACG,cAAC,IAAD,CAASC,GAAIF,EAAMG,UAAWC,IAAEC,OAAQC,gBAAiBF,IAAEG,OAA3D,SAAoER,EAAIS,UCClEC,EANE,SAACC,GACf,OACG,qBAAKP,UAAWC,IAAEO,QAAlB,SAA4BD,EAAME,Y,+BCIlCC,EAAWC,YAAQ,YAwBnBC,EAAiB,SAACL,GACrB,IAAIM,EAAmBN,EAAMO,YAAYC,SAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAUR,SAAUQ,EAAEC,SAAcD,EAAEnB,OAO3FqB,EAAmBC,MAAaC,MAAM,CACzCH,QAASE,MAAaE,SAAS,wEAElC,OACG,sBAAKtB,UAAWC,IAAEQ,SAAlB,UACG,8BAAMI,IACN,8BACG,cAAC,IAAD,CACGU,cAAe,CAAEL,QAAS,IAC1BM,SAdG,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACvBnB,EAAMoB,cAAcF,EAAOP,SAC3BO,EAAOP,QAAU,GACjBQ,GAAc,IAYLP,iBAAkBA,EAHrB,SAKI,gBACEM,EADF,EACEA,OACAG,EAFF,EAEEA,OACAC,EAHF,EAGEA,QACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,WACAC,EANF,EAMEA,aACAC,EAPF,EAOEA,aAPF,OASE,uBAAMT,SAAUQ,EAAhB,UAEG,cAAC,IAAD,CACGE,UAAWxB,EACXkB,OAAQA,EAAOV,QACfW,QAASA,EAAQX,QACjBiB,KAAK,UACL9B,KAAK,UACL+B,YAAY,qBACZC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOd,EAAOP,UAEjB,uBACA,wBAAQiB,KAAK,SAASK,SAAUP,EAAhC,gFAYNQ,EA7EC,SAAClC,GAEd,IAAImC,EAAkBnC,EAAMO,YAAY6B,QAAQ3B,KAAI,SAAA4B,GAAC,OAAI,cAAC,EAAD,CAAYvC,KAAMuC,EAAEvC,KAAiBP,GAAI8C,EAAE9C,IAAZ8C,EAAE9C,OAM1F,OAAKS,EAAMsC,OAER,sBAAK7C,UAAWC,IAAE0C,QAAlB,UACG,8BACG,qBAAK3C,UAAWC,IAAE6C,cAAlB,SACIJ,MAGP,cAAC,EAAD,2BAAoBnC,GAApB,IAA2BoB,cAZb,SAACoB,GAClBxC,EAAMyC,wBAAwBD,UAGP,cAAC,IAAD,CAAUhD,GAAI,Y,iBCfvCkD,EAA6B,SAACC,GAC/B,MAAO,CACJL,OAAQK,EAAMC,KAAKN,S,QCCnBO,E,uKACH,c,oBAGA,WACG,OACG,cAAC,EAAD,eAAaC,KAAK9C,Y,GANI+C,IAAMC,WAoBtBC,sBAAQC,aARD,SAACP,GACpB,MAAO,CACJpC,YAAaoC,EAAMpC,YACnB4C,eAAgBR,EAAMpC,YAAY4C,eAClCb,OAAQK,EAAMC,KAAKN,UAIuB,CAAEG,+BDlBlB,SAACO,GAAe,IAEvCI,EAFsC,4JAGzC,WACG,OAAKN,KAAK9C,MAAMsC,OACT,cAAEU,EAAF,eAAgBF,KAAK9C,QADG,cAAC,IAAD,CAAUR,GAAG,eAJN,GAEZuD,IAAMC,WAQtC,OADsCE,YAAQR,EAARQ,CAAoCE,KCS9DH,CAAiFJ","file":"static/js/4.8401df60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1v2U-\",\"dialogs_items\":\"Dialogs_dialogs_items__3GkTB\",\"dialog\":\"Dialogs_dialog__8lHBB\",\"messages\":\"Dialogs_messages__2CiJC\",\"active\":\"Dialogs_active__UdaWs\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from \"./../Dialogs.module.scss\";\n\nconst DialogItem = (obj) => {\n   let path = \"/Dialogs/\" + obj.id\n   return (\n      <div >\n         <NavLink to={path} className={s.dialog} activeClassName={s.active}>{obj.name}</NavLink>\n      </div>\n   )\n}\n\nexport default DialogItem;","import React from 'react';\nimport s from \"./../Dialogs.module.scss\";\n\nconst Massages = (props) => {\n   return (\n      <div className={s.message}>{props.messages}</div>\n   )\n}\n\nexport default Massages;","import React from 'react';\nimport DialogItem from './DialogItem/DialogItem';\nimport Massages from './Massages/Massages';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Redirect } from 'react-router-dom';\nimport s from \"./Dialogs.module.scss\";\nimport * as yup from 'yup';\nimport Element from '../common/formControls/formControls';\n\nconst Textarea = Element('textarea');\n\nconst Dialogs = (props) => {\n\n   let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\n\n   let addNewMassage = (text) => {\n      props.addMassageActionCreator(text)\n   }\n\n   if (!props.isAuth) return <Redirect to={\"/login\"} />\n   return (\n      <div className={s.dialogs}>\n         <div>\n            <div className={s.dialogs_items}>\n               {dialogsElements}\n            </div>\n         </div>\n         <AddMassageForm {...props} addNewMassage={addNewMassage} />\n\n      </div>\n   )\n}\n\nconst AddMassageForm = (props) => {\n   let messagesElements = props.dialogsPage.massages.map(m => <Massages messages={m.massage} key={m.id} />);\n\n   const submit = (values, { setSubmitting }) => {\n      props.addNewMassage(values.massage);\n      values.massage = '';\n      setSubmitting(false);\n   }\n   const validationSchema = yup.object().shape({\n      massage: yup.string().required('Обязательно'),\n   })\n   return (\n      <div className={s.messages}>\n         <div>{messagesElements}</div>\n         <div>\n            <Formik\n               initialValues={{ massage: '' }}\n               onSubmit={submit}\n               validationSchema={validationSchema}\n            >\n               {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting,\n               }) => (\n                  <form onSubmit={handleSubmit}>\n\n                     <Field\n                        component={Textarea}\n                        errors={errors.massage}\n                        touched={touched.massage}\n                        type=\"massage\"\n                        name=\"massage\"\n                        placeholder=\"Enter your massage\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.massage}\n                     />\n                     <br />\n                     <button type=\"submit\" disabled={isSubmitting}>\n                        Отправить\n                     </button>\n                  </form>\n               )}\n            </Formik>\n\n         </div>\n      </div>\n   )\n}\n\nexport default Dialogs;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n   return {\r\n      isAuth: state.auth.isAuth,\r\n   }\r\n}\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n   class RedirectComponent extends React.Component {\r\n      render() {\r\n         if (!this.props.isAuth) return <Redirect to='/login' />\r\n         return < Component {...this.props} />\r\n      }\r\n   }\r\n\r\n   let ConnectedWhithRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n   return ConnectedWhithRedirectComponent;\r\n\r\n}","import React from 'react';\nimport Dialogs from './Dialogs';\nimport { addMassageActionCreator } from '../../redux/dialogs-reducer';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from './../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nclass DialogsContainer extends React.Component {\n   componentDidMount() {\n\n   }\n   render() {\n      return (\n         <Dialogs {...this.props} />\n      )\n\n   }\n}\n\nlet mapStateToProps = (state) => {\n   return {\n      dialogsPage: state.dialogsPage,\n      newMassageText: state.dialogsPage.newMassageText,\n      isAuth: state.auth.isAuth,\n   }\n}\n\nexport default compose(connect(mapStateToProps, { addMassageActionCreator }), withAuthRedirect)(DialogsContainer)\n"],"sourceRoot":""}